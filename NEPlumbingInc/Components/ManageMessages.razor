@inject IMessageService MessageService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Messages</h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Special Offer</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var message in messages)
                    {
                        <tr class="@(!message.IsRead ? "table-info" : "")">
                            <td>@message.CreatedAt.ToLocalTime().ToString("g")</td>
                            <td>@message.Name</td>
                            <td>@message.Email</td>
                            <td>@message.Phone</td>
                            <td>
                                @if (message.IsSpecialOffer)
                                {
                                    <span class="badge bg-success">Yes</span>
                                }
                            </td>
                            <td>
                                @if (!message.IsRead)
                                {
                                    <span class="badge bg-info">New</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Read</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" 
                                        @onclick="() => ViewMessage(message)">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" 
                                        @onclick="() => DeleteMessage(message.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Message Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>From:</strong> @selectedMessage.Name</p>
                    <p><strong>Email:</strong> @selectedMessage.Email</p>
                    @if (!string.IsNullOrEmpty(selectedMessage.Phone))
                    {
                        <p><strong>Phone:</strong> @selectedMessage.Phone</p>
                    }
                    <p><strong>Date:</strong> @selectedMessage.CreatedAt.ToLocalTime().ToString("g")</p>
                    <hr />
                    <p>@selectedMessage.Message</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<MessageViewModel> messages = new();
    private MessageViewModel selectedMessage = new();
    private bool showModal;

    protected override async Task OnInitializedAsync() => 
        await LoadMessages();

    private async Task LoadMessages() => 
        messages = await MessageService.GetAllMessagesAsync();

    private async Task ViewMessage(MessageViewModel message)
    {
        selectedMessage = message;
        showModal = true;
        
        if (!message.IsRead)
        {
            await MessageService.MarkAsReadAsync(message.Id);
            await LoadMessages();
        }
    }

    private void CloseModal()
    {
        showModal = false;
        selectedMessage = new MessageViewModel();
    }

    private async Task DeleteMessage(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Are you sure you want to delete this message?");
        
        if (confirmed)
        {
            await MessageService.DeleteMessageAsync(id);
            await LoadMessages();
        }
    }
}