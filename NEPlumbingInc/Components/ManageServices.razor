@inject IServiceManager ServiceManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<style>
    .preview-container {
        max-height: 200px;
        overflow: hidden;
        border-radius: 8px;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .preview-image {
        max-width: 100%;
        max-height: 200px;
        object-fit: contain;
        padding: 8px;
    }

    .upload-zone {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
        background: #f8f9fa;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .upload-zone:hover {
        border-color: var(--bs-primary);
        background: #fff;
    }
</style>

<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Manage Services</h5>
        <button class="btn btn-success" @onclick="@(() => AddService())" type="button">
            <i class="fas fa-plus"></i> Add Service
        </button>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Active</th>
                        <th>Options</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var svc in services)
                    {
                        <tr>
                            <td>
                                @if (!string.IsNullOrEmpty(svc.ServiceImage))
                                {
                                    <img src="@svc.ServiceImage" alt="Service" style="height: 40px;" class="rounded" />
                                }
                            </td>
                            <td>@svc.ServiceName</td>
                            <td>@(svc.IsActive ? "Yes" : "No")</td>
                            <td>
                                <span class="badge bg-secondary">
                                    @(svc.SubServices?.Count ?? 0) options
                                </span>
                            </td>
                            <td>@svc.CreatedAt.ToShortDateString()</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditService(svc)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteService(svc.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit" : "Add") Service</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <EditForm Model="@editService" OnValidSubmit="SaveService" FormName="serviceForm">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">Service Name</label>
                                    <InputText class="form-control" @bind-Value="editService.ServiceName" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <InputTextArea class="form-control" @bind-Value="editService.ServiceDescription" rows="4" />
                                </div>
                                <div class="form-check mb-3">
                                    <InputCheckbox class="form-check-input" @bind-Value="editService.IsActive" />
                                    <label class="form-check-label">Active</label>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Service Type</label>
                                    <select class="form-select" @bind="editService.ConsultationType" @bind:after="StateHasChanged">
                                        @foreach (var type in Enum.GetValues(typeof(ConsultationType)))
                                        {
                                            <option value="@type">@(type.ToString())</option>
                                        }
                                    </select>
                                </div>

                                <hr class="my-4" />

                                <div class="mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5 class="mb-0">Sub Services</h5>
                                        <button type="button" class="btn btn-sm btn-outline-success" @onclick="() => OpenSubServiceModal(null)">
                                            <i class="fas fa-plus"></i> Add Option
                                        </button>
                                    </div>

                                    @if (editService.SubServices?.Any() == true)
                                    {
                                        <div class="list-group">
                                            @for (int i = 0; i < editService.SubServices.Count; i++)
                                            {
                                                var sub = editService.SubServices[i];
                                                var index = i;

                                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>@sub.Name</strong>
                                                        <div class="text-muted small">@sub.Description</div>
                                                        @if (sub.Price.HasValue)
                                                        {
                                                            <span class="badge bg-primary">Starting at @($"{sub.Price.Value:N2}")</span>
                                                        }
                                                    </div>
                                                    <div class="d-flex flex-nowrap align-items-center" style="gap:0.5rem; min-width:90px;">
                                                        <button type="button" class="btn btn-sm btn-outline-primary"
                                                                @onclick="() => OpenSubServiceModal(index)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-outline-danger"
                                                                @onclick="() => RemoveSubService(sub)">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h6 class="card-subtitle mb-3">Service Image</h6>
                                        @if (!string.IsNullOrEmpty(editService.ServiceImage))
                                        {
                                            <div class="preview-container mb-3">
                                                <img src="@editService.ServiceImage" 
                                                     class="preview-image" 
                                                     alt="Service preview" />
                                            </div>
                                            <button type="button" 
                                                    class="btn btn-outline-danger btn-sm w-100"
                                                    @onclick="RemoveImage">
                                                Remove Image
                                            </button>
                                        }
                                        else
                                        {
                                            <UploadImage OnImageUploaded="HandleImageUploaded" />
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (showSubServiceModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingSubServiceIndex != null ? "Edit" : "Add") Sub Service</h5>
                    <button type="button" class="btn-close" @onclick="CloseSubServiceModal"></button>
                </div>
                <EditForm Model="@editingSubService" OnValidSubmit="SaveSubService" FormName="subServiceForm">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText class="form-control" @bind-Value="editingSubService.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="editingSubService.Description" rows="3" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Price</label>
                            <InputNumber class="form-control" @bind-Value="editingSubService.Price" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseSubServiceModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<ServicesFormModel> services = new();
    private ServicesFormModel editService = new();
    private bool showModal;
    private bool isEditing;

    private bool showSubServiceModal = false;
    private SubServiceModel editingSubService = new();
    private int? editingSubServiceIndex = null;

    protected override async Task OnInitializedAsync() => await LoadServices();

    private async Task LoadServices() => 
        services = await ServiceManager.GetAllServicesAsync();

    private void AddService()
    {
        editService = new ServicesFormModel
        {
            IsActive = true,
            CreatedAt = DateTime.UtcNow,
            ConsultationType = ConsultationType.Inspection
        };
        showModal = true;
        isEditing = false;
    }

    private void EditService(ServicesFormModel service)
    {
        editService = new ServicesFormModel
        {
            Id = service.Id,
            ServiceName = service.ServiceName,
            ServiceDescription = service.ServiceDescription,
            ServiceImage = service.ServiceImage,
            IsActive = service.IsActive,
            ConsultationType = service.ConsultationType,
            SubServices = service.SubServices?.ToList() ?? new List<SubServiceModel>()
        };
        showModal = true;
        isEditing = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editService = new ServicesFormModel();
    }

    private async Task SaveService()
    {
        if (isEditing)
            await ServiceManager.UpdateServiceAsync(editService);
        else
            await ServiceManager.CreateServiceAsync(editService);

        showModal = false;
        editService = new ServicesFormModel();
        await LoadServices();
        StateHasChanged();
    }

    private async Task DeleteService(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete this service?");
        if (confirmed)
        {
            await ServiceManager.DeleteServiceAsync(id);
            await LoadServices();
        }
    }

    private void AddSubService()
    {
        editService.SubServices ??= new List<SubServiceModel>();
        editService.SubServices.Add(new SubServiceModel());
    }

    private void RemoveSubService(SubServiceModel subService)
    {
        editService.SubServices?.Remove(subService);
    }

    private async Task HandleImageUploaded(string imageData)
    {
        editService.ServiceImage = imageData;
        await InvokeAsync(StateHasChanged);
    }

    private void RemoveImage()
    {
        editService.ServiceImage = null;
        StateHasChanged();
    }

    private void OpenSubServiceModal(int? index)
    {
        if (index is int i)
        {
            // Edit existing
            if (editService.SubServices != null && i >= 0 && i < editService.SubServices.Count)
            {
                var sub = editService.SubServices[i];
                editingSubService = new SubServiceModel
                {
                    Id = sub.Id,
                    Name = sub.Name,
                    Description = sub.Description,
                    Price = sub.Price
                };
                editingSubServiceIndex = i;
            }
            else
            {
                editingSubService = new SubServiceModel();
                editingSubServiceIndex = null;
            }
        }
        else
        {
            // Add new
            editingSubService = new SubServiceModel();
            editingSubServiceIndex = null;
        }
        showSubServiceModal = true;
    }

    private void CloseSubServiceModal()
    {
        showSubServiceModal = false;
        editingSubService = new SubServiceModel();
        editingSubServiceIndex = null;
    }

    private void SaveSubService()
    {
        if (editingSubServiceIndex is int i)
        {
            // Update existing
            editService.SubServices ??= new List<SubServiceModel>();
            if (i >= 0 && i < editService.SubServices.Count)
            {
                editService.SubServices[i] = new SubServiceModel
                {
                    Name = editingSubService.Name,
                    Description = editingSubService.Description,
                    Price = editingSubService.Price
                };
            }
        }
        else
        {
            // Add new
            editService.SubServices ??= new List<SubServiceModel>();
            editService.SubServices.Add(new SubServiceModel
            {
                Name = editingSubService.Name,
                Description = editingSubService.Description,
                Price = editingSubService.Price
            });
        }
        CloseSubServiceModal();
    }
}