@inject IServiceManager ServiceManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Manage Services</h5>
        <button class="btn btn-success" @onclick="ShowModal">
            <i class="fas fa-plus"></i> Add Service
        </button>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Active</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var svc in services)
                    {
                        <tr>
                            <td>
                                @if (!string.IsNullOrEmpty(svc.ServiceImage))
                                {
                                    <img src="@svc.ServiceImage" alt="Service" style="height: 40px;" class="rounded" />
                                }
                            </td>
                            <td>@svc.ServiceName</td>
                            <td>@(svc.IsActive ? "Yes" : "No")</td>
                            <td>@svc.CreatedAt.ToShortDateString()</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditService(svc)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteService(svc.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit" : "Add") Service</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <EditForm Model="@editService" OnValidSubmit="SaveService" FormName="serviceForm">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-8">c
                                <div class="mb-3">
                                    <label class="form-label">Service Name</label>
                                    <InputText class="form-control" @bind-Value="editService.ServiceName" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <InputTextArea class="form-control" @bind-Value="editService.ServiceDescription" rows="4" />
                                </div>
                                <div class="form-check mb-3">
                                    <InputCheckbox class="form-check-input" @bind-Value="editService.IsActive" />
                                    <label class="form-check-label">Active</label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <UploadImage Label="Service Image"
                                           ImagePath="@editService.ServiceImage"
                                           ImagePathChanged="@(path => editService.ServiceImage = path)" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<ServicesFormModel> services = new();
    private ServicesFormModel editService = new();
    private bool showModal;
    private bool isEditing;

    protected override async Task OnInitializedAsync() => await LoadServices();

    private async Task LoadServices() => 
        services = await ServiceManager.GetAllServicesAsync();

    private void ShowModal()
    {
        editService = new ServicesFormModel();
        showModal = true;
        isEditing = false;
    }

    private void EditService(ServicesFormModel service)
    {
        editService = new ServicesFormModel
        {
            Id = service.Id,
            ServiceName = service.ServiceName,
            ServiceDescription = service.ServiceDescription,
            ServiceImage = service.ServiceImage,
            IsActive = service.IsActive
        };
        showModal = true;
        isEditing = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editService = new ServicesFormModel();
    }

    private async Task SaveService()
    {
        if (isEditing)
            await ServiceManager.UpdateServiceAsync(editService);
        else
            await ServiceManager.CreateServiceAsync(editService);

        showModal = false;
        await LoadServices();
    }

    private async Task DeleteService(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete this service?");
        if (confirmed)
        {
            await ServiceManager.DeleteServiceAsync(id);
            await LoadServices();
        }
    }
}