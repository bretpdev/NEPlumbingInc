@page "/admin-login"
@using NEPlumbingInc.Models
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <div class="card mt-5">
            <div class="card-header bg-primary text-white">
                <h3 class="card-title mb-0">Admin Login</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="adminLoginForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="username">Username:</label>
                        <InputText id="username" @bind-Value="@loginModel.Username" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Username)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password">Password:</label>
                        <InputText id="password" @bind-Value="@loginModel.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100">Login</button>
                </EditForm>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @errorMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private AdminLoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try 
        {
            var user = await AuthenticationService.LoginAsync(loginModel.Username, loginModel.Password);

            if (user != null)
            {
                ((CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsAuthenticated(user.Username);
                NavigationManager.NavigateTo("/admin-dashboard", true);
            }
            else
            {
                errorMessage = "Invalid username or password";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login error: {ex.Message}";
            StateHasChanged();
        }
    }
}