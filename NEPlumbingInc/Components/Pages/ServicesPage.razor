@page "/services"
@rendermode InteractiveServer
@inject IServiceManager ServiceManager

<style>
    .modal.fade.show .modal-dialog {
        transform: translateY(0) scale(1);
        opacity: 1;
        transition: all 0.3s ease-in-out;
    }

    .service-card {
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        border: none;
        border-radius: 12px;  /* Slightly larger border radius */
        background: linear-gradient(to bottom, #ffffff, #f8f9fa);
    }

    .service-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(0,0,0,0.15) !important;
    }

    .service-card::after {
        content: "Click for details →";
        position: absolute;
        bottom: 1rem;
        right: 1rem;
        background: var(--bs-primary);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.875rem;
        opacity: 0;
        transform: translateX(10px);
        transition: all 0.3s ease;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .image-container {
        height: 220px;  /* Slightly taller container */
        overflow: hidden;
        position: relative;
        background: linear-gradient(135deg, #e9ecef, #dee2e6); /* Angled gradient */
        display: flex;
        align-items: center;
        justify-content: center;
        border-bottom: 1px solid rgba(0,0,0,0.08);
    }

    .service-image {
        width: 90%;  /* Slightly smaller to create margin */
        height: 90%;
        object-fit: contain;
        object-position: center;
        transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);  /* Smooth easing */
        filter: drop-shadow(0 8px 15px rgba(0,0,0,0.15))
               contrast(1.02)
               saturate(1.05);  /* Subtle image enhancement */
    }

    .service-card:hover .service-image {
        transform: scale(1.08) translateY(-5px);
        filter: drop-shadow(0 15px 25px rgba(0,0,0,0.2))
               contrast(1.05)
               saturate(1.1);
    }

    .service-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 220px;
        background: radial-gradient(circle at center, transparent 70%, rgba(0,0,0,0.03));
        pointer-events: none;
    }

    .card-title {
        color: var(--bs-primary);
        font-weight: 600;
        margin-bottom: 0.75rem;
        border-bottom: 2px solid transparent;
        transition: border-color 0.3s ease;
    }

    .service-card:hover .card-title {
        border-bottom-color: var(--bs-primary);
    }

    .card-text {
        color: #6c757d;
        font-size: 0.95rem;
        line-height: 1.5;
    }

    .service-card:hover::after {
        opacity: 1;
        transform: translateX(0);
    }

    .service-card:active {
        transform: translateY(-2px);
    }

    .card-body {
        padding: 1.5rem;  /* More generous padding */
        background: linear-gradient(180deg, #ffffff, #f8f9fa);
    }
</style>

<h1 class="text-center mb-5">N.E. Plumbing Services</h1>

<div class="container">
    <div class="row">
        @foreach (var service in services)
        {
            <div class="col-md-4 mb-4">
                <div class="card service-card h-100 shadow-sm" @onclick="@(() => OpenModal(service))">
                    @if (!string.IsNullOrEmpty(service.ServiceImage))
                    {
                        <div class="image-container">
                            <img src="@service.ServiceImage" 
                                 class="service-image" 
                                 alt="@service.ServiceName"
                                 @onerror="@(e => Console.WriteLine($"Image failed to load: {service.ServiceImage}"))" />
                        </div>
                    }
                    else
                    {
                        <div class="image-container bg-light d-flex align-items-center justify-content-center">
                            <span class="text-muted">No image available</span>
                        </div>
                    }
                    <div class="card-body">
                        <h5 class="card-title">@service.ServiceName</h5>
                        <p class="card-text text-truncate">@service.ServiceDescription</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (selectedService != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.6);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedService.ServiceName</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p class="lead mb-4">@selectedService.ServiceDescription</p>

                    @if (selectedService.SubServices?.Any() == true)
                    {
                        <div class="card shadow-sm">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">Service Options & Pricing</h5>
                            </div>
                            <ul class="list-group list-group-flush">
                                @foreach (var sub in selectedService.SubServices)
                                {
                                    <li class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="ms-2 me-auto">
                                                <div class="fw-bold">@sub.Name</div>
                                                @if (!string.IsNullOrEmpty(sub.Description))
                                                {
                                                    <p class="mb-0 text-muted small">@sub.Description</p>
                                                }
                                            </div>
                                            @if (sub.Price.HasValue)
                                            {
                                                <div class="text-end">
                                                    <span class="badge bg-primary rounded-pill fs-6">
                                                        Starting at @($"${sub.Price.Value:N2}")
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Contact us for detailed pricing information.
                        </div>
                    }
                </div>
                <div class="modal-footer flex-column align-items-stretch">
                    <div class="text-muted small text-center mb-2">
                        All prices shown are starting points. Final costs may vary based on requirements.
                    </div>
                    <div class="d-flex justify-content-end">
                        <a href="/contact" class="btn btn-primary me-2">
                            <i class="fas fa-envelope me-2"></i>
                            @(selectedService.ConsultationType == ConsultationType.Inspection 
                                ? "Schedule Inspection" 
                                : "Schedule Consultation")
                        </a>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ServicesFormModel> services = new();
    private ServicesFormModel? selectedService;

    protected override async Task OnInitializedAsync()
    {
        services = await ServiceManager.GetActiveServicesAsync();
        
        // Debug output
        foreach (var service in services)
        {
            Console.WriteLine($"Service: {service.ServiceName}");
            Console.WriteLine($"SubServices count: {service.SubServices?.Count ?? 0}");
            if (service.SubServices != null)
            {
                foreach (var sub in service.SubServices)
                {
                    Console.WriteLine($"  - {sub.Name}: ${sub.Price}");
                }
            }
        }
    }

    private void OpenModal(ServicesFormModel service)
    {
        selectedService = service;
    }

    private void CloseModal()
    {
        selectedService = null;
    }
}