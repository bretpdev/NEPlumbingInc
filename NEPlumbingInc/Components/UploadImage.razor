@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<InputFile OnChange="OnFileSelected" />

@if (!string.IsNullOrEmpty(ImagePath))
{
    <div class="mt-2">
        <img src="@ImagePath" style="max-height: 150px;" class="rounded border" />
    </div>
}

@code {
    [Parameter] public string? ImagePath { get; set; }
    [Parameter] public EventCallback<string> ImagePathChanged { get; set; }
    [Parameter] public string? Label { get; set; }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try 
        {
            var file = e.File;
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream(10_000_000)), "file", file.Name);

            var client = HttpClientFactory.CreateClient("LocalApi");
            var response = await client.PostAsync("/api/upload", content);
            var imagePath = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                ImagePath = imagePath;
                await ImagePathChanged.InvokeAsync(imagePath);
            }
            else
            {
                Console.Error.WriteLine($"Image upload failed: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Upload error: {ex.Message}");
        }
    }
}