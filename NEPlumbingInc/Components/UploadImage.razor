@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="upload-container">
    <InputFile OnChange="HandleFileSelected" class="file-input" accept="image/*" />
    <div class="upload-zone">
        <i class="fas fa-cloud-upload-alt fs-3 mb-2"></i>
        <p class="mb-0">Click to upload image</p>
    </div>
</div>

<style>
    .upload-container {
        position: relative;
    }

    .file-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }

    .upload-zone {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
        background: #f8f9fa;
        transition: all 0.3s ease;
    }

    .upload-zone:hover {
        border-color: var(--bs-primary);
        background: #fff;
    }
</style>

@code {
    [Parameter] public string? ImagePath { get; set; }
    [Parameter] public EventCallback<string> ImagePathChanged { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter]
    public EventCallback<string> OnImageUploaded { get; set; }

    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB limit
    private const int BufferSize = 4096; // Use smaller chunks for reading

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try 
        {
            var file = e.File;
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream(10_000_000)), "file", file.Name);

            var client = HttpClientFactory.CreateClient("LocalApi");
            var response = await client.PostAsync("/api/upload", content);
            var imagePath = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                ImagePath = imagePath;
                await ImagePathChanged.InvokeAsync(imagePath);
            }
            else
            {
                Console.Error.WriteLine($"Image upload failed: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Upload error: {ex.Message}");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                if (file.Size > MaxFileSize)
                {
                    await JS.InvokeVoidAsync("alert", "File size exceeds 5MB limit.");
                    return;
                }

                // Create a MemoryStream to ensure complete file reading
                using var memoryStream = new MemoryStream();
                await using var stream = file.OpenReadStream(maxAllowedSize: MaxFileSize);
                
                // Read file in chunks
                var buffer = new byte[BufferSize];
                int bytesRead;
                while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
                {
                    await memoryStream.WriteAsync(buffer.AsMemory(0, bytesRead));
                }

                // Convert to base64
                var imageBytes = memoryStream.ToArray();
                var base64Image = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}";

                // Verify the image data is complete
                if (memoryStream.Length == file.Size)
                {
                    await OnImageUploaded.InvokeAsync(base64Image);
                }
                else
                {
                    throw new InvalidOperationException("File upload incomplete");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing image: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error processing image. Please try again.");
            throw;
        }
    }
}